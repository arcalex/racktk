#!/usr/bin/perl -w

#
# Youssef Eldakar <youssef.eldakar@bibalex.org>
#

#



#

use strict;

use File::Basename;
use Getopt::Std;

use lib "/afs/archive.bibalex.org/git/racktk/lib";
use Racktk::Select;

my %opts;

getopts ( "ag:m:l", \%opts ) 

  && (    defined $opts{a}
       || defined $opts{g}
       || defined $opts{m} ) && ( defined $opts{l} || @ARGV == 1 ) || help () && exit 1;


    if ( my @results = Racktk::Select::select ( \%opts ) )
    {
      # Host selection returned results to process.
      bootdefault
           ( @results );
    }
 else
    {
      help ();
    }


sub help
{
  print STDERR basename ( $0 ), " ", "[-a] [-g groups] [-m ranges] -l\n";
  print STDERR basename ( $0 ), " ", "[-a] [-g groups] [-m ranges] label\n";
}

sub bootdefault
{
  my $i;
  my $n;


  for ( $i = 0, $n = @_ - 1; $i <= $n; $i++ )
  {
    my @defined_labels
      = ( get_option ( "/srv/tftp/pxelinux.cfg/$_[$i]->{x}",
          "label" ) );
    my $defined_label;
    my $default_label
      = ( get_option ( "/srv/tftp/pxelinux.cfg/$_[$i]->{x}",
        "default" ) )[0];

    if ( defined ( $opts{l} ) )
    {
      print "$_[$i]->{h} (/srv/tftp/pxelinux.cfg/$_[$i]->{x}):";

      foreach $defined_label ( @defined_labels )
      {
        print " $defined_label";
        print "*" if $defined_label eq $default_label;
      }

      print "\n";
    }
    else
    {
      unless ( grep { $ARGV[0] eq $_ } @defined_labels )
      {
        print "$_[$i]->{h} (/srv/tftp/pxelinux.cfg/$_[$i]->{x}):" .
          " $ARGV[0]: undefined label\n";
        next;
      }

      set_option ( "/srv/tftp/pxelinux.cfg/$_[$i]->{x}", "default", $ARGV[0] );
    }
  }
}

sub get_option
{
  # Match,substitution, and stream processing command strings.
  my $m =
    "^\\([ \\t]*\\)\\($_[1]\\)\\([ \\t]\\+\\)\\(.*[^ \\t]\\)\\([ \\t]*\\)\$";
  my $s =
    "\\4";
  my $c =
    join " ", ( "sed",
      "-n",
      "-e", "'s/$m/$s/i'", "-e", "'Tx;p;:x'",
      $_[0]
      );

  my @o;

  # Get a PXELINUX option.
  @o = `$c`;
  chomp @o;

  if ( $? == 0 )
  {
    return @o;
  }
  else
  {
    return undef;
  }
}

sub set_option
{
  # Match,substitution, and stream processing command strings.
  my $m =
    "^\\([ \\t]*\\)\\($_[1]\\)\\([ \\t]\\+\\)\\(.*[^ \\t]\\)\\([ \\t]*\\)\$";
  my $s =
    "\\1\\2\\3$_[2]\\5";
  my $c =
    join " ", ( "sed",
      "-i",
      "-e", "'s/$m/$s/i'",
      $_[0]
      );

  # Set a PXELINUX option.
  `$c`;

  if ( $? == 0 )
  {
    return 1;
  }
  else
  {
    return undef;
  }
}

#!/usr/bin/perl -w

#
# Youssef Eldakar <youssef.eldakar@bibalex.org>
#

#
# SET BOOT DEFAULT TO AUTO

# IF PING IS POSITIVE: REBOOT

# wait until negative ping followed by positive ping

# IF PING IS NEGATIVE: ETHERWAKE

# wait until positive ping

# SET BOOT DEFAULT TO LOCALBOOT
#

use strict;

use File::Basename;
use Getopt::Std;

use Parallel::ForkManager;

use lib "/afs/archive.bibalex.org/git/racktk/lib";
use Racktk::Select;

my %opts;

getopts ( "cr:ag:m:", \%opts ) 

  && (    defined $opts{a}
       || defined $opts{g}
       || defined $opts{m} ) || help () && exit 1;

unless ( defined ( $opts{r} ) )
{
  $opts{r} = "rsh";
}


    if ( my @results = Racktk::Select::select ( \%opts ) )
    {
      # Host selection returned results to process.
      install
           ( @results );
    }
 else
    {
      help ();
    }


sub help
{
  print STDERR basename ( $0 ), " ", "[-r rsh] [-a] [-g groups] [-m ranges]\n";
}

sub install
{
  my $i;
  my $n;

  # State-keeping vector.
  my @s;

  # State machine ticker, tick limit, and seconds to pause at the end of
  # each tick.
  my $tick;
  my $tick_limit = 200;
  my $pause = 3;

  my $all_done;

  for ( $tick = 0; $tick < $tick_limit; ++$tick )
  {
    # Assume all done.
    $all_done = 1;

    for ( $i = 0, $n = @_ - 1; $i <= $n; $i++ )
    {
        if ( ! defined($s[$i]) || $s[$i] != 5 )
        {
          $all_done = 0;

             if ( ! $s[$i] )
             {
                  auto
                    ( $_[$i]->{h} );
                  $s[$i] = 1;
             }
          elsif (   $s[$i] == 1 )
             {
                if (   ping ( $_[$i]->{h} ) )
                {
                  reboot
                    ( $_[$i]->{h} );
                  $s[$i] = 2;
                }
                else
                {
                  on
                    ( $_[$i]->{h} );
                  $s[$i] = 3;
                }
             }
          elsif (   $s[$i] == 2 )
             {
                # WAIT UNTIL NEGATIVE PING
                if ( ! ping ( $_[$i]->{h} ) )
                {
                  $s[$i] = 3;
                }
             }
          elsif (   $s[$i] == 3 )
             {
                # WAIT UNTIL POSITIVE PING
                if (   ping ( $_[$i]->{h} ) )
                {
                  $s[$i] = 4;
                }
             }
          elsif (   $s[$i] == 4 )
             {
                  localboot
                    ( $_[$i]->{h} );
                  $s[$i] = 5;
             }
        }
    }

    if ( $all_done )
    {
      last;
    }

    # Pause at the end of each tick of the state machine.
    sleep ( $pause );
  }

  if ( ! $all_done )
  {
    print "Wait time expired while polling hosts for status.\n";
  }
  else
  {
    print "All hosts are back online.\n";
  }
}

sub ping
{
  `ping -c1 $_[0]`;
  $? == 0;
}


sub auto
{
  # Set boot default to auto.
  `rackbootdefault -m $_[0] auto`;
}

sub localboot
{
  # Set boot default to localboot.
  `rackbootdefault -m $_[0] localboot`;
}

sub reboot
{
  # Run a reboot.
  `rackreboot -m $_[0]`;
}

sub on
{
  # Use a Magic Packet to power host on.
  `rackon -m $_[0]`;
}
